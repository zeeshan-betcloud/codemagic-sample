workflows:
  unity-ios-workflow:
    name: Unity iOS Workflow
    instance_type: mac_mini_m1
    max_build_duration: 120
    integrations:
      app_store_connect: codemagic
    environment:
      ios_signing:
        distribution_type: app_store
        bundle_identifier: io.codemagic.unitysample
      groups:
        - unity_credentials
      vars:
        BUILD_SCRIPT: BuildIos
        UNITY_IOS_DIR: ios
        XCODE_PROJECT: "Unity-iPhone.xcodeproj"
        XCODE_SCHEME: "Unity-iPhone"
        APP_STORE_APP_ID: 1555555551
      cocoapods: default
    scripts:
      - name: Activate Unity License
        script: |
          $UNITY_HOME/Contents/MacOS/Unity -batchmode -quit -logFile \
            -serial ${UNITY_SERIAL?} \
            -username ${UNITY_EMAIL?} \
            -password ${UNITY_PASSWORD?}
      - name: Generate the Xcode project from Unity
        script: |
          $UNITY_HOME/Contents/MacOS/Unity -batchmode \
            -quit \
            -logFile \
            -projectPath . \
            -executeMethod BuildScript.$BUILD_SCRIPT \
            -nographics
      - name: Set up code signing settings on Xcode project
        script: |
          xcode-project use-profiles
      - name: Increment build number
        script: |
          BUILD_NUMBER=($(app-store-connect get-latest-app-store-build-number "$APP_ID") + 1)
          cd $UNITY_IOS_DIR
          agvtool new-version -all $BUILD_NUMBER
      - name: Build ipa for distribution
        script: |
          xcode-project build-ipa \
            --project "$UNITY_IOS_DIR/$XCODE_PROJECT" \
            --scheme "$XCODE_SCHEME"
    artifacts:
      - build/ios/ipa/*.ipa
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    publishing:
      scripts:
        - name: Deactivate Unity License
          script: | 
            /Applications/Unity\ Hub.app/Contents/Frameworks/UnityLicensingClient_V1.app/Contents/MacOS/Unity.Licensing.Client \
            --return-ulf \
            --username ${UNITY_EMAIL?} \
            --password ${UNITY_PASSWORD?}
      email:
        recipients:
          - user_1@example.com
          - user_2@example.com
        notify:
          success: true
          failure: false
      app_store_connect:
        auth: integration
        #
        # Configuration related to TestFlight (optional)
        # Note: This action is performed during post-processing.
        submit_to_testflight: true 
        #
        # Specify the names of beta tester groups that will get access 
        # to the build once it has passed beta review.
        beta_groups:
          - group name 1
          - group name 2
        #
        # Configuration related to App Store (optional)
        # Note: This action is performed during post-processing.
        submit_to_app_store: true


  unity-android-workflow:
    name: Unity Android Workflow
    max_build_duration: 120
    environment:
      android_signing:
        - keystore_reference
      groups:
        - unity_credentials
        - google_play
      vars:
        BUILD_SCRIPT: BuildAndroid
        PACKAGE_NAME: "io.codemagic.unitysample"
        GOOGLE_PLAY_TRACK: alpha
    scripts:
      - name: Activate Unity License
        script: |
          $UNITY_HOME/Contents/MacOS/Unity -batchmode -quit -logFile \
            -serial ${UNITY_SERIAL?} \
            -username ${UNITY_EMAIL?} \
            -password ${UNITY_PASSWORD?}
      - name: Set build number
        script: |
          export NEW_BUILD_NUMBER=$(($(google-play get-latest-build-number \
            --package-name "$PACKAGE_NAME" \
            --tracks="$GOOGLE_PLAY_TRACK") + 1))
      - name: Build the project
        script: |
          $UNITY_HOME/Contents/MacOS/Unity -batchmode \
          -quit \
          -logFile \
          -projectPath . \
          -executeMethod BuildScript.$BUILD_SCRIPT \
          -nographics
    artifacts:
      - android/*.aab
    publishing:
      scripts:
        - name: Deactivate Unity License
          script: | 
            /Applications/Unity\ Hub.app/Contents/Frameworks/UnityLicensingClient_V1.app/Contents/MacOS/Unity.Licensing.Client \
            --return-ulf \
            --username ${UNITY_EMAIL?} \
            --password ${UNITY_PASSWORD?}
      email:
        recipients:
          - user_1@example.com
          - user_2@example.com
        notify:
          success: true
          failure: false
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: GOOGLE_PLAY_TRACK
        submit_as_draft: true



  unity-windows-workflow:
    name: Unity Windows Workflow
    max_build_duration: 120
    instance_type: windows_x2
    environment:
      groups:
        - unity_credentials
      vars:
        BUILD_SCRIPT: BuildWindows
    scripts:
      - name: Activate & Build Unity Using a Command Prompt
        script: |
          cmd.exe /c "$env:UNITY_HOME\\Unity.exe" ^
            -batchmode -quit -logFile ^
            -projectPath . ^
            -executeMethod BuildScript.$env:BUILD_SCRIPT ^
            -nographics ^
            -serial $env:UNITY_SERIAL ^
            -username $env:UNITY_EMAIL ^
            -password $env:UNITY_PASSWORD
      - name: Export Unity
        script: |
          cd windows
          7z a -r release.zip ./*
    artifacts:
      - windows/*.zip
    publishing:
      scripts:
        - name: Deactivate Unity License using a Command Prompt
          script: |
            cmd.exe /c "$env:UNITY_HOME\\Unity.exe" -batchmode -quit -returnlicense -nographics
      email:
        recipients:
          - user_1@example.com
          - user_2@example.com
        notify:
          success: true
          failure: false
      slack:
        channel: "#your-channel-name"
        notify_on_build_start: true


  unity-android-workflow-win-machine:
    name: Unity Android on Windows Workflow
    max_build_duration: 120
    instance_type: windows_x2
    environment:
      android_signing:
        - keystore_reference
      groups:
        - unity_credentials
        - google_play
      vars:
        BUILD_SCRIPT: BuildAndroid
        PACKAGE_NAME: "io.codemagic.unitysample"
    scripts:
      - name: Set build number and export Unity
        script: |
          export NEW_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --tracks=alpha) + 1))
      - name: Build the project
        script: |
          cmd.exe /c "$env:UNITY_HOME\\Unity.exe" ^
            -batchmode -quit -logFile "$env:CM_BUILD_DIR\\android\\log-android.txt" ^
            -projectPath . ^
            -executeMethod BuildScript.$env:BUILD_SCRIPT ^
            -nographics ^
            -serial $env:UNITY_SERIAL ^
            -username $env:UNITY_EMAIL ^
            -password $env:UNITY_PASSWORD
    artifacts:
      - android/*.aab
      - android/*.apk
      - android/*.txt #the log files
    publishing:
      scripts:
        - name: Deactivate Unity License
          script: |
            cmd.exe /c "$env:UNITY_HOME\\Unity.exe" ^
              -batchmode ^
              -quit ^
              -returnlicense ^
              -nographics
      email:
        recipients:
          - user_1@example.com
          - user_2@example.com
        notify:
          success: true
          failure: false
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: GOOGLE_PLAY_TRACK
        submit_as_draft: true
  
  
  unity-macos-workflow:
    name: Unity Mac Workflow
    environment:
      groups:
        - unity_credentials
        - appstore_credentials
      vars:
        BUILD_SCRIPT: BuildMac
        UNITY_MAC_DIR: mac
        BUNDLE_ID: "io.codemagic.unitysample"
    scripts:
      - name: Activate Unity license
        script: | 
          $UNITY_HOME/Contents/MacOS/Unity -batchmode -quit -logFile \
            -serial ${UNITY_SERIAL?} \
            -username ${UNITY_EMAIL?} \
            -password ${UNITY_PASSWORD?}
      - name: Set up keychain to be used for codesigning
        script: keychain initialize
      - name: Fetch signing files
        script: | 
          app-store-connect fetch-signing-files "$BUNDLE_ID" \
            --platform MAC_OS \
            --type MAC_APP_STORE \
            --create
      - name: Fetch Mac Installer Distribution certificates
        script: |
          app-store-connect list-certificates --type MAC_APP_DISTRIBUTION --save || \
          app-store-connect create-certificate --type MAC_APP_DISTRIBUTION --save
      - name: Add certs to keychain
        script: keychain add-certificates
      - name: Set up code signing settings on Xcode project
        script: xcode-project use-profiles
      - name: Build the project
        script: |
          $UNITY_HOME/Contents/MacOS/Unity \
            -batchmode \
            -quit \
            -logFile \
            -projectPath . \
            -executeMethod BuildScript.$BUILD_SCRIPT \
            -nographics
      - name: Package macOS application
        script: |
          set -x
          # Command to find the path to your generated app
          APP_NAME=$(find $(pwd) -name "*.app")
          cd $(dirname "$APP_NAME")
          PACKAGE_NAME=$(basename "$APP_NAME" .app).pkg
          
          # Create an unsigned package
          xcrun productbuild \
            --component "$APP_NAME" \
            /Applications/ unsigned.pkg
          
          # Find the installer certificate commmon name in keychain
          INSTALLER_CERT_NAME=$(keychain list-certificates \
            | jq '.[]
            | select(.common_name
            | contains("Mac Developer Installer"))
            | .common_name' \
            | xargs)
          
          # Sign the package
          xcrun productsign --sign "$INSTALLER_CERT_NAME" unsigned.pkg "$PACKAGE_NAME"
          
          # Optionally remove the not needed unsigned package
          rm -f unsigned.pkg 
    artifacts:
      - $UNITY_MAC_DIR/*.app
      - $UNITY_MAC_DIR/*.pkg
    publishing:
      scripts:
        - name: Deactivate Unity License
          script: | 
            /Applications/Unity\ Hub.app/Contents/Frameworks/UnityLicensingClient_V1.app/Contents/MacOS/Unity.Licensing.Client \
            --return-ulf \
            --username ${UNITY_EMAIL?} \
            --password ${UNITY_PASSWORD?}
      email:
        recipients:
          - user_1@example.com
          - user_2@example.com
        notify:
          success: true
          failure: false
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: false 
        submit_to_app_store: true
